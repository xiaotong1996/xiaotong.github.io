{"meta":{"title":"xiaotong's blog","subtitle":null,"description":null,"author":"Xiaotong CHEN","url":"https://xiaotong1996.github.io"},"pages":[{"title":"About","date":"2019-01-08T20:01:50.000Z","updated":"2019-01-08T20:03:30.111Z","comments":true,"path":"about/index.html","permalink":"https://xiaotong1996.github.io/about/index.html","excerpt":"","text":""},{"title":"Tags","date":"2019-01-08T21:13:48.666Z","updated":"2019-01-08T21:13:48.666Z","comments":true,"path":"tags/index.html","permalink":"https://xiaotong1996.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"C#review补档","slug":"C-review","date":"2019-01-08T22:21:25.000Z","updated":"2019-01-08T22:36:09.860Z","comments":true,"path":"2019/01/08/C-review/","link":"","permalink":"https://xiaotong1996.github.io/2019/01/08/C-review/","excerpt":"","text":"C#回顾与java明显不同 WriteLine() 文件名可以不同于类的名称 动态（Dynamic）类型您可以存储任何类型的值在动态数据类型变量中。这些变量的类型检查是在运行时发生的。 声明动态类型的语法：dynamic &lt;variable_name&gt; = value; 指针类型变量存储另一种类型的内存地址。C# 中的指针与 C 或 C++ 中的指针有相同的功能。 常量是使用 const 关键字来定义的 ? : 运算符我们已经在前面的章节中讲解了 条件运算符 ? :，可以用来替代 if…else 语句。它的一般形式如下：Exp1 ? Exp2 : Exp3; for(;;) 结构来表示一个无限循环。 return 语句可用于只从函数中返回一个值。但是，可以使用 输出参数 来从函数中返回两个值。输出参数会把方法输出的数据赋给自己，其他方面与引用参数相似。 关键字 out 在 C# 中，使用 ref 关键字声明引用参数。 数组：double[] balance = new double[10]; foreach (int j in n ) C# 参数数组:params 关键字 当声明一个方法时，您不能确定要传递给函数作为参数的参数数目在使用数组作为形参时，C# 提供了 params 关键字，使调用数组为形参的方法时，既可以传递数组实参，也可以只传递一组数组。params 的使用格式为：public 返回类型 方法名称( params 类型名称[] 数组名称 ) C# 中的析构函数类的 析构函数 是类的一个特殊的成员函数，当类的对象超出范围时执行。析构函数的名称是在类的名称前加上一个波浪形（~）作为前缀，它不返回值，也不带任何参数。析构函数用于在结束程序（比如关闭文件、释放内存等）之前释放资源。析构函数不能继承或重载。 注意点 C# string 字符串的前面可以加 @（称作”逐字字符串”）将转义字符（\\）当作普通字符对待，比如：string str = @&quot;C:\\Windows&quot;;等价于：string str = &quot;C:\\\\Windows&quot;; Console.ReadLine() 只接受字符串格式的数据。 可空类型：在处理数据库和其他包含可能未赋值的元素的数据类型时，将 null 赋值给数值类型或布尔型的功能特别有用：&lt; data_type&gt; ? &lt;variable_name&gt; = null; 我们可以使用 static 关键字把类成员定义为静态的。当我们声明一个类成员为静态时，意味着无论有多少个类的对象被创建，只会有一个该静态成员的副本。关键字 static 意味着类中只有一个该成员的实例。 您也可以把一个成员函数声明为 static。这样的函数只能访问静态变量。静态函数在对象被创建之前就已经存在。 抽象类在某种程度上与接口类似，但是，它们大多只是用在当只有少数方法由基类声明由派生类实现时。 待详细看 namespace命名空间:using System;命名空间的设计目的是为了提供一种让一组名称与其他名称分隔开的方式。在一个命名空间中声明的类的名称与另一个命名空间中声明的相同的类的名称不冲突。 可空类型 多维数组和交错数组:C# 支持多维数组。多维数组又称为矩形数组。交错数组是数组的数组。 Array 类是 C# 中所有数组的基类，它是在 System 命名空间中定义。Array 类提供了各种用于数组的属性和方法。直接调用array中的方法能实现数组的逆转和排序等 结构在 C# 中，结构是值类型数据结构。它使得一个单一变量可以存储各种数据类型的相关数据。struct 关键字用于创建结构。 动态多态性 委托（delegate)C# 中的委托（Delegate）类似于 C 或 C++ 中函数的指针。委托（Delegate） 是存有对某个方法的引用的一种引用类型变量。引用可在运行时被改变。 委托（Delegate）特别用于实现事件和回调方法。所有的委托（Delegate）都派生自 System.Delegate 类。","categories":[],"tags":[{"name":"C#","slug":"C","permalink":"https://xiaotong1996.github.io/tags/C/"}]},{"title":"2018-7-26-JavaEE-WEB-2","slug":"2018-7-26-JavaEE-WEB-2","date":"2018-07-26T21:01:27.000Z","updated":"2019-01-08T22:07:06.220Z","comments":true,"path":"2018/07/26/2018-7-26-JavaEE-WEB-2/","link":"","permalink":"https://xiaotong1996.github.io/2018/07/26/2018-7-26-JavaEE-WEB-2/","excerpt":"","text":"JAVA EE WEB学习（二）创建第一个Servlet Servlet作用 直接处理和响应用户请求 将处理工作委托给应用中其他部分的类 WEB容器会有一个或多个Servlet，用于处理JSP、显示目录列表、访问静态资源 继承的servlet类 继承HttpServlet 接收HttpServletRequest和HttpServletResponse参数 简单例子123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596package servlet;import java.io.IOException;import java.io.PrintWriter;import javax.servlet.ServletException;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;public class Demo3 extends HttpServlet &#123; private static final String DEFAULT_USER=&quot;Guest&quot;; /** * Constructor of the object. */ public Demo3() &#123; super(); &#125; /** * Destruction of the servlet. &lt;br&gt; */ public void destroy() &#123; super.destroy(); // Just puts &quot;destroy&quot; string in log // Put your code here System.out.println(this.getServletInfo()); System.out.println(&quot;fin&quot;); &#125; /** * The doGet method of the servlet. &lt;br&gt; * * This method is called when a form has its tag value method equals to get. * * @param request the request send by the client to the server * @param response the response send by the server to the client * @throws ServletException if an error occurred * @throws IOException if an error occurred */ public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; String user =request.getParameter(&quot;user&quot;); if(user==null) &#123; user=Demo3.DEFAULT_USER; &#125; response.setContentType(&quot;text/html&quot;); response.setCharacterEncoding(&quot;UTF-8&quot;); PrintWriter out = response.getWriter(); out.append(&quot;&lt;!DOCTYPE HTML&gt;\\r\\n&quot;) .append(&quot;&lt;HTML&gt;\\r\\n&quot;) .append(&quot; &lt;HEAD&gt;\\r\\n&quot;) .append(&quot; &lt;TITLE&gt;A Servlet&lt;/TITLE&gt;\\r\\n&quot;) .append(&quot; &lt;/HEAD&gt;\\r\\n&quot;) .append(&quot; &lt;BODY&gt;\\r\\n&quot;) .append(&quot; Hello, &quot;).append(user).append(&quot;!&lt;br/&gt;&lt;br/&gt;\\r\\n&quot;) .append(&quot; &lt;form action=\\&quot;demo3\\&quot; method=\\&quot;POST\\&quot;&gt;\\r\\n&quot;) .append(&quot; Enter your name:&lt;br/&gt;\\r\\n&quot;) .append(&quot; &lt;input type=\\&quot;text\\&quot; name=\\&quot;user\\&quot;/&gt;&lt;br/&gt;\\r\\n&quot;) .append(&quot; &lt;input type=\\&quot;submit\\&quot; value=\\&quot;Submit\\&quot;/&gt;\\r\\n&quot;) .append(&quot; &lt;/form&gt;\\r\\n&quot;) .append(&quot; &lt;/BODY&gt;\\r\\n&quot;) .append(&quot;&lt;/HTML&gt;\\r\\n&quot;); &#125; /** * The doPost method of the servlet. &lt;br&gt; * * This method is called when a form has its tag value method equals to post. * * @param request the request send by the client to the server * @param response the response send by the server to the client * @throws ServletException if an error occurred * @throws IOException if an error occurred */ public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; this.doGet(request, response); &#125; /** * Initialization of the servlet. &lt;br&gt; * * @throws ServletException if an error occurs */ public void init() throws ServletException &#123; // Put your code here System.out.println(&quot;start&quot;); System.out.println(this.getServletName()); &#125;&#125; 注意点 init方法在构造完成之后，响应第一个请求之前调用 调用init方法时，Servlet中所有属性都已设置完，提供了对ServletConfig和SercletContext对象的访问。 可以使用init方法读取属性文件或使用JDBC连接数据库 destory方法在Servlet不再接受请求之后立即调用，即web应用程序被停止或卸载，或Web容器关闭时。因此：应该使用destory方法清理servlet持有的资源 配置可部署的Servlet 在web.xml中部署，一般IDE会在创建时自动部署。 12345&lt;servlet&gt; ..... ..... &lt;load-on-startup&gt;x&lt;/load-on-startup&gt;&lt;/servlet&gt; Servlet按照x大小顺序启动，越小优先级越高。 将Servlet映射到URL&lt;servlet-name&gt;对应&lt;url-pattern&gt;一个servlet可以映射到多个url 了解doGet、doPost和其他方法HttpServletRequest 功能：从客户端发送的请求中获取参数。参数有两种形式：查询参数和请求正文（post请求）。查询参数在HTTP请求的第一行数据中如GET /index.jsp?id=412&amp;category=Books HTTP/1.1中有两个查询参数:id和category 或 作为post变量保存在请求正文中 获取请求参数：方法getParameter返回参数单个值，或多个参数第一个值；getParameterValues返回参数值的数组；getParameterMap返回包含所有参数名值对；getparameterNames返回所有可用参数的名字的枚举。后两种方法一般用于遍历所有请求参数。 确定与请求内容相关的信息：getContentType返回请求的内容类型；getContentLength返回请求正文长度。 读取请求的内容：getInputStream读二进制格式；BufferedReader读基于字符编码。不要在同一请求上同时使用这两种方法；不要在含post变量的请求上使用这些方法 获取请求特有的数据getRequestURL：返回完整URL；getRequestURI：返回服务器路径；getServletPath：只返回Servlet映射的URL; HttpServletResponse 功能：提供了对响应中与HTTP协议相关属性的访问。可用于：设置响应头、编写相应正文、重定向请求、设置HTTP状态码等 编写响应正文：将内容输出到响应正文中。getOutputStream和getWritter都可以向响应中输出数据。不要对同一响应对象同时使用这两种方法。 设置内容类型或编码格式：使用setContentType和setCharacterEncoding方法。必须放在getWritter方法之前，否则返回到writer使用容器默认编码。 设置头和其他响应属性：暂略 使用初始化参数配置应用程序使用上下文初始化参数 在web.xml文件中用&lt;context-param&gt;标签声明上下文初始化参数 在&lt;servlet&gt;外部 在Servlet代码中获得和使用这些参数：先获得servletcontext（getServletContext），用这个实例的getInitParameter方法，参数为param-name可得到param-value。 使用servlet初始化参数 将&lt;init-param&gt;添加到&lt;servlet&gt;内部 在Servlet代码中获得和使用这些参数：先获得ServletConfig（getServletConfig），用这个实例的getInitParameter方法，参数为param-name可得到param-value。 通常用这种方式改变数据库服务器的IP地址 通过表单上传文件","categories":[],"tags":[{"name":"JavaEE","slug":"JavaEE","permalink":"https://xiaotong1996.github.io/tags/JavaEE/"}]},{"title":"2018-7-25-JavaEE-WEB-1","slug":"2018-7-25-JavaEE-WEB-1","date":"2018-07-25T21:01:27.000Z","updated":"2019-01-08T22:10:15.207Z","comments":true,"path":"2018/07/25/2018-7-25-JavaEE-WEB-1/","link":"","permalink":"https://xiaotong1996.github.io/2018/07/25/2018-7-25-JavaEE-WEB-1/","excerpt":"","text":"JAVA EE WEB学习（一）基本结构 Servlet等 servlet：接收响应HTTP请求 过滤器：拦截发送给servlet的请求，用于：数据格式化，对返回的数据压缩、认证和授权 监听器：通知代码多种事件，如：程序启动、关闭，HTTP会话创建和销毁 JavaServer Pages/JSP：创建图形用户界面 目录结构和归档文件WAR Java归档文件：JAR Java EE WEB归档文件：WAR ) 部署描述符 用于描述Web应用程序的元数据，为服务器部署和运行Web应用程序提供指令。 来自于/WEB-INF/web.xml 包含Servlet、监听器和过滤器的定义+HTTP会话、JSP和应用程序的配置选项。 可用注解配置Web应用程序 类加载器架构（ClassLoader) Java SE 平台中，java.*类加载到根类加载器-&gt;JRE中的扩展JAR加载到扩展类加载器-&gt;其他所有类加载到Class Loader 双亲优先类加载委托模式：低级别加载器申请加载一个类时，将委托不断向上传递至根加载器，确认成功。未能找到，则从自己的JAR文件和目录中尝试加载。 Java EE WEb中，使用子女优先类加载委托模式：公共的服务器类加载器给每个WEB应用程序分配一个自由的相互隔离的类加载器。在自己无法加载某个类时，请求它的父类加载器帮助加载。","categories":[],"tags":[{"name":"JavaEE","slug":"JavaEE","permalink":"https://xiaotong1996.github.io/tags/JavaEE/"}]},{"title":"WEB学习-HTML和CSS入门","slug":"2018-02-20-WEB-learning","date":"2018-02-19T23:00:00.000Z","updated":"2019-01-08T21:49:29.807Z","comments":true,"path":"2018/02/20/2018-02-20-WEB-learning/","link":"","permalink":"https://xiaotong1996.github.io/2018/02/20/2018-02-20-WEB-learning/","excerpt":"","text":"目录{:toc} WEB项目文件结构 常用网页框架设计 1个100%页面宽度的行类(.row) 占页面1/12-12/12的列类(.col-n)n为1-12的数字CSS类前有. flex 为了让行中列元素并排显示，需要给row加上display:flex 关于flex，查看flex,flexbox,flex-wrap 负空间（space） margin 外边距 padding 内边距 加上后缀-top -right -left -bottom具体设置border 边框 溢出 overflow:auto; 响应例子：@media only screen and (max-width:500px) and (orientation:landscape) @media实现页面响应 only‘用于兼容旧式浏览器 screen指示这个响应用于所有显示设备print用于响应当用户要打印页面时 and加上条件 orientation指的是手机方向：landscape mode横向，portrait mode纵向 浏览器兼容在head中添加normalize.css样式表，该表格google搜索下载 占位图片 &lt;img src=&quot;http://placehold.it/nxn&quot; &lt;img src=&quot;http://placekitten.com/n/n&quot; 字体 在Google Fonts中找到字体 在html的head中加入链接&lt;link href=&quot;https://fonts.googleapis.com/css?family=Roboto&quot; rel=&quot;stylesheet&quot;&gt; 在css中为需要使用该字体的元素添加font-family: &#39;Roboto&#39;, sans-serif;","categories":[],"tags":[{"name":"WEB入门","slug":"WEB入门","permalink":"https://xiaotong1996.github.io/tags/WEB入门/"}]},{"title":"WEB学习-Bootstrap框架学习","slug":"2018-02-21-WEB-Bootstrap-learning","date":"2018-02-19T23:00:00.000Z","updated":"2019-01-08T21:51:18.151Z","comments":true,"path":"2018/02/20/2018-02-21-WEB-Bootstrap-learning/","link":"","permalink":"https://xiaotong1996.github.io/2018/02/20/2018-02-21-WEB-Bootstrap-learning/","excerpt":"","text":"[TOC] Grid system(网格系统) 每一行rows应放在.container(fixed-width)或.container-fluid(full-width)中 使用rows来创建水平列组(groupes of columns) 内容放在column中，column是rows的子类 Chrome开发者工具ctrl+shift+i 应用框架要将 bootstrap CSS 应用于 bootstrap-prestructure.html 文件，需要：将 bootstrap-prestructure.html 文件移至你的 bootstrap 目录。打开 HTML 文件，在母体元素下方的 head 元素中添加一条指向 bootstrap CSS 文件的链接：&lt;link rel=&quot;stylesheet&quot; href=&quot;css/bootstrap.min.css&quot;&gt; 保存修改要将你在开发者工具中对 HTML 所做的更改保存至你的 HTML 文件，只需右键单击或 ctrl + 单击 元素，然后选择“复制为 HTML”，然后用复制的文本替换你文件中的 HTML。 响应式页面响应式图片加上class=&quot;img-responsive&quot; alt=&quot;Responsive image&quot; Bootstrap排版文字对齐加上class=&quot;text-left&quot;表示左对齐文字装换加上class=&quot;text-uppercase&quot;将文字变为大写可添加在文字类型如h1，h3，最好是直接添加在包含他们的div上 自定义CSS在/css文件夹下添加style.css文件从大到小对网页中的元素添加定制","categories":[],"tags":[{"name":"WEB入门","slug":"WEB入门","permalink":"https://xiaotong1996.github.io/tags/WEB入门/"},{"name":"Bootstrap","slug":"Bootstrap","permalink":"https://xiaotong1996.github.io/tags/Bootstrap/"}]},{"title":"Git 学习","slug":"2018-02-06-Git-learning","date":"2018-02-05T23:00:00.000Z","updated":"2019-01-08T21:43:39.022Z","comments":true,"path":"2018/02/06/2018-02-06-Git-learning/","link":"","permalink":"https://xiaotong1996.github.io/2018/02/06/2018-02-06-Git-learning/","excerpt":"","text":"目录{:toc} 基础以在GitLab上创建一个project为例 1. SSH秘钥生成SSH秘钥指令：$ ssh-keygen -t rsa -C &quot;votre.email@telecom-sudparis.eu&quot; -b 4096保存在$HOME/.ssh/id_rsa.pub将获得的SSH秘钥填入GitLab网站SSH秘钥用于GitLab网站识别Unix账号 2. 创建project并添加合作者命名规则：课程+年份+创作者给合作者Master权限 3. 克隆project到本地git clone git@gitlab.tem-tsp:votreprenom.votrenom/votrenomdeproject.git 4. 查看git状态git status 5. 创建第一个文件README.md并提交 git add README.md git commit -m &quot;注释&quot; git push origin master 其他合作者git pull origin git add：i） git add . 或 git add --all 提交所有修改 git commit：i） git commit后会生产一个hash码，用于标记此次commit操作 git push：i） git push默认将master上传ii）origin是远程仓库名，master是分支名 git pull：i）当有其他人想master分支推送了更新，则服务器上的master向前推进，本地的Master落后服务器版本，需要运行 git fetch来同步本地并用git merge合并，或直接用git pull。git pull=git fetch + git merge 分支操作branch 1. 创建分支git checkout -b module1 i） 创建并转到module1分支ii）git checkout 分支名 转到已存在的分支 2. 查看分支git branch i）一般而言，Master分支是默认创建的。但若是在项目一开始，即项目为空时，创建分支，会丢失master分支。 3. 在分支上进行操作 与在基础部分操作相同 在每个分支上做的add,commit操作是独立的 4. 查看日志 git log --graph --oneline --decorate 使用工具gitg/gitk 5. 合并（Fusion）分支 转到Mastergit checkout master git merge --no-ff moudle1 -m &quot;Merge branch &#39;modele1&#39;&quot; i) 有--no-ff则moudle1会保留，没有则不保留module1分支 冲突conflict设置冲突管理工具git config merge.tool meld 冲突前提分支module1和Master中有同一个文件，且分别在不同分支修改了文件，并做了add commit操作。做第二次commit时冲突发送。 解决方法：用git mergetool调用meld，查看修改冲突的地方，修改保存后会生成很多不必要的文件用rm 文件名.文件类型.* 文件名_* *~删除这些文件。 Git-flowGit-flow原则 两条长期分支master只保留官方的，实用的代码版本develop在这个分支进行开发，只有想正式对外发布且经过确认，才会和Master合并。 新建develop分支：git checkout -b develop master 将develop分支发布到Master分支：git checkout Master​ `git merge --no-ff develop ` 创建release(预发布)分支当要进行develop分支和Master合并时，先从develop分支上创建一个release分支，加上标签（tag)用于标记新的版本。建议创建一个release分支，这个分支里commit只用于修改bugs。 在develop的子分支（feature分支）上编码只有子分支状态满足，develop上的合并操作才会执行 hotfix当master上发现bug，就在master上引出一个hotfix分支。这个分支有两个作用： 为Master提供一个新版本 为develop修复整个project的bug 注意：release,feature和hotfix分支都是临时分支，使用完后，应该删除，使代码库的常设分支始终只有Master和Deve。 Git-flow例子 在本地建立工作文件夹，初始化库 123456mkdir exercice-git-flow cd exercice-git-flow git init touch README.md git add README.md git commit -m &quot;commit initial&quot; 新建develop分支git checkout -b develop 新建feature分支，以功能名命名git checkout -b navire1 在这个分支中写一个文本文档 123gedit navire.txt git add navire.txt git commit -m &quot;navire version 1` 修改和二次提交为navire.txt中加入新的几行 123gedit navire.txt git add navire.txt git commit -m &quot;navire version 2&quot; 现在我们已经实现了一定功能，合并这个分支和develop 12git checkout develop git merge --no-ff navire1 -m &quot;Merge branch &apos;navire1&apos; into develop&quot; 假设经过多次3-5，我们已经实现了很多功能，想把develop和master合并 12git checkout master git merge --no-ff develop -m &quot;commit release 1.0&quot; 因为这是一个正式版本，我们加上标签taggit tag -a v1.0 -m &quot;release 1.0&quot; 版本控制=有待完成=","categories":[],"tags":[{"name":"Git","slug":"Git","permalink":"https://xiaotong1996.github.io/tags/Git/"}]},{"title":"Vim学习（一）","slug":"2018-02-05-Vim-learning-1","date":"2018-02-04T23:00:00.000Z","updated":"2019-01-08T21:43:08.602Z","comments":true,"path":"2018/02/05/2018-02-05-Vim-learning-1/","link":"","permalink":"https://xiaotong1996.github.io/2018/02/05/2018-02-05-Vim-learning-1/","excerpt":"","text":"目录{:toc} vim学习Part 112345- i → Insert 模式，按 ESC 回到 ormal 模式.- x → 删当前光标所在的一个字符。- :wq → 存盘 + 退出 (:w 存盘, :q 退出) （注：:w 后可以跟文件名）- dd → 删除当前行，并把删除的行存到剪贴板里- p → 粘贴剪贴板 Part 2 插入模式 a → 在光标后插入 o → 在当前行后插入一个新行 O → 在当前行前插入一个新行 cw → 替换从光标所在位置后到一个单词结尾的字符 简单的移动光标 0 → 数字零，到行头 ^ → 到本行第一个不是blank字符的位置（所谓blank字符就是空格，tab，换行，回车等） $ → 到本行行尾 g_ → 到本行最后一个不是blank字符的位置。 /pattern → 搜索 pattern 的字符串（陈皓注：如果搜索出多个匹配，可按n键到下一个） 拷贝/粘贴 P → 粘贴;p是表示在当前位置之后，P表示在当前位置之前 yy → 拷贝当前行当行于 ddP;y -&gt; 拷贝 Undo/Redo u → undo C-r → redo 打开/保存/退出/改变文件(Buffer) :e &lt;path/to/file&gt; → 打开一个文件 :w → 存盘 :saveas &lt;path/to/file&gt; → 另存为 &lt;path/to/file&gt; :x， ZZ 或 :wq → 保存并退出 (:x 表示仅在需要时保存，ZZ不需要输入冒号并回车) :q! → 退出不保存 :qa! 强行退出所有的正在编辑的文件，就算别的文件有更改。 :bn 和 :bp → 你可以同时打开很多文件，使用这两个命令来切换下一个或上一个文件。 Part 3 vim的重复 . 小数点，重复上一条命令 N加命令，重复N次 光标移动 数字加G，到第N行 gg，到第一行 G，到最后一行 w，到下个词开k移动到与当前光标相匹配的词（×是下一个，#是上一个） 组合命令（开始位置+命令+结束位置） 0y$; 拷贝本行，+p粘贴 能与光标移动联动的还有 d，删除 v，可视化选择 gU，变大写 gu，变小写 其他 Part 4 当前行上移动光标 0，到行头 ^，到本行的第一个非blank字符 $，到行尾 f字符，到下一个字符处 t字符，到符号前的第一个字符 3fa，到本行第三次出现的a处 F和T，与f和t相似，方向相反 dt符号，删除符号前的所有内容 可视化选择v,V J，把所有行连在一起 &lt;和&gt;,左右缩进 =，自动缩进 选中行后，$到最后，a插入字符，Esc为每行添加字符 分屏 ：split，创建分屏 ctrl-w，切屏","categories":[],"tags":[{"name":"vim","slug":"vim","permalink":"https://xiaotong1996.github.io/tags/vim/"}]},{"title":"Markdown 学习","slug":"2018-01-27-Markdown-learning","date":"2018-01-26T23:00:00.000Z","updated":"2019-01-08T21:41:43.413Z","comments":true,"path":"2018/01/27/2018-01-27-Markdown-learning/","link":"","permalink":"https://xiaotong1996.github.io/2018/01/27/2018-01-27-Markdown-learning/","excerpt":"","text":"目录{:toc} Markdown 学习一个好的Markdown学习网站 注释comment\\ 标题Header# 加空格实现 句段Sentence/Paragraph 换行 行末加两个空格 \\ 符号Punctuation Charcaters *倾斜* -或+ 列表 >引用 字符实体 tab 预格式化 分隔符Horizontal Rules-– 三个减号或星号或下划线需隔开上一行 文本格式Text Styling 星号（*）或下划线（_）包围的文字将会显示斜体 ex: 倾斜 两个星号（**）或下划线（__）包围的需要特别强调的文字将会加粗 ex: 加粗 两个等号（equalsigns：\\=）包围来突出高亮显示。ex: ==高亮== 使用两个加号（plus sign：+）来标记下划线。ex：++下划线++ 两个波浪符号（two wavy line:~~）包围来给文本添加删除线。ex: 删除线 脚标 Script标准 Markdown 不支持脚标，只能通过内嵌 HTML 的\\&lt;sup>和\\&lt;sub>标签来实现。 脚标两边加上\\&lt; &gt; ex: 2^10^ 脚标两边加上~ ~ ex: H~2~o 链接Hyperlink 文字 Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要用尖括号包起来的文字， Markdown 就会自动把它转化成链接。如果你还想要加上链接的 title ，只要在网址后面用双引号把 title 文字包起来即可。 [text](url”解释“) ex: 链接 先定义参考refid：[text][refid]再定义refid所指：[refid]:URL 图片 插入图片 需要在链接文字方括号之前添加一个感叹号（exclamation mark：!），其语法格式 ![alt_text](url) 其中alt_text可以置空 Markdown中的段落（包括图片）默认顶格左对齐，若要将图片居中，可以直接内嵌 HTML 的 标签，设置align=”middle”。如果还不行，可以尝试封裹一层 div 设置 style=”text-align:center” 实现 图片链接 我们在 Markdown 图片标记外面再嵌套一层即可建立图片超链接，点击图片即可跳转到链接地址。图片链接的格式看起来大概是这样的:[![](img_url)](ref_url) 锚点inner link 书签Bookmark 先定义锚点id：bookmark_text 再定义一个id为auchor_id的对象（这里以为例）：auchor_text 脚注Footnote 先在需要脚注的单词（terminology）后面添 加 [^Footnote] ： terminology[^Footnote] 再在文末 glossary 区域定义脚注（添加注解）： [^Footnote]：explanatory notes 引用BlockquoteMarkdown 标记区块引用是使用类似 email 的引用方式，在断好的行前加上 &gt; （more than or greater than sign）： 代码Code 行内代码Inline CodeUse the printf() function.(此处使用了反斜杠转义) 代码块Code Blocks 可使用预格式化引用语法格式。Preformatted Code Block在句段的行首插入1个 tab 或4个空格，则表示代码块。 [Fenced Code Block]在句段行首和行末用三个反引号换行闭包，并在行首三个反引号后添加 YAML 语言标识。 列表List 无序列表Unordered List无序列表（unordered, bulleted）项目的行首使用星号（或加号，或减号）加空格作为列表标记list markers 有序列表Ordered List有序列表（ordered / numbered）项目的行首则使用数字接一个英文句点标记（use numbers followed by periods） 扩展支持把列表变成带勾选框的任务列表，只需要在列表标记后添加[ ]标记☐表示unchecked，在中括号中填写x（[x]）标记☑︎表示checked（filled）。 表格TableYou can create tables by assembling a list of words and dividing them with hyphens - (for the first row), and then separating each column with a pipe | (vertical bar): t1 t2 t11 t12 t21 t22","categories":[],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"https://xiaotong1996.github.io/tags/Markdown/"}]}]}